#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Student
{
    int code;
    char* name;
}Student;

typedef struct Node
{
    Student* info;
    struct Node* next;
    struct Node* prev;
}Node;


Student* createStudent(int code, char* name);
Node* createNode(Student* info);

Node* insertAtBeg(Student* info, Node* tail);
void insertTail(Student* info, Node** tail);
Node* insertNthPos(Student* info, Node* tail, int pos);

Node* deleteAtBeg(Node* tail);
Node* deleteNthPos(Node* tail, int pos);
Node* deleteTail(Node* tail);
Node* delete(Node* head, int pos);

void printStudent(Student* info);
void print(const Node* head);


void main()
{
    Node* list = NULL;
    Student* stud = NULL;

    FILE* pFile = fopen("Data.txt", "r");
    char lineBuffer[128];

    char* token;
    char sep_list[] = ",\n";

    if (pFile)
    {
        while (fgets(lineBuffer, sizeof(lineBuffer), pFile))
        {
            stud = (Student*)malloc(sizeof(Student));
            //parsing the code
            token = strtok(lineBuffer, sep_list);
            stud->code = atoi(token);

            //parsing the name
            token = strtok(NULL, sep_list);
            stud->name = (char*)malloc(strlen(token) + 1);
            strcpy(stud->name, token);

            //insert into the list
            insertTail(stud, &list);
        }
        print(list);
    }

}

void print(const Node* tail)
{
    if (tail == NULL) printf("no elements");
    else
    {
        Node* temp = tail->next;
        do
        {
            printStudent(temp->info);
            temp = temp->next;
        } while (temp != tail->next);
    }

    printf("\n");
}

void printStudent(Student* info)
{
    printf("Code %d - Name %s \n", info->code, info->name);
}

Node* deleteNthPos(Node* tail, int pos)
{
    Node* temp = tail->next;
    while (pos > 1)
    {
        temp = temp->next;
        pos--;
    }
    Node* temp2 = temp->prev;
    temp2->next = temp->next;
    temp->next->prev = temp2;
    free(temp);
    if (temp == tail)
    {
        tail = temp2;
    }
    return tail;

}

Node* deleteTail(Node* tail)
{
    if (tail == NULL)return tail;
    Node* temp = tail->prev;
    temp->next = tail->next;
    tail->next->prev = temp;
    free(tail);
    tail = temp;
    return tail;

}

Node* deleteAtBeg(Node* tail)
{
    if (tail == NULL) return tail;
    Node* temp = tail->next;
    if (temp == tail)
    {
        free(tail);
        tail = NULL;
        return tail;
    }
    tail->next = temp->next;
    temp->next->prev = tail;
    free(temp);
    return tail;
}
Node* insertNthPos(Student* info, Node* tail, int pos)
{
    Node* node = createNode(info);
    Node* temp = tail->next;

    while (pos > 1)
    {
        temp = temp->next;
        pos--;
    }
    node->prev = temp;
    node->next = temp->next;
    temp->next->prev = node;
    if (temp == tail)
    {
        tail = tail->next;
    }
    return tail;
}

void insertTail(Student* info, Node** tail)
{
    Node* node = createNode(info);
    if (*tail == NULL)
    {
        *tail = node;
    }
    else 
    {
        Node* temp = (*tail)->next;
        node->next = temp;
        node->prev = tail;
        (*tail)->next = node;
        temp->prev = node;
        tail = node;
    }

}
Node* insertAtBeg(Student* info, Node* tail)
{
    Node* node = createNode(info);
    Node* temp = tail->next;
    //connect the node to the structure
    node->prev = tail;
    node->next = temp;
    temp->prev = node;
    tail->next = node;
    //connect the structure to the node
    tail = node;
    return tail;
}
Node* createNode(Student* info)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->info = info;
    node->next = node;
    node->prev = node;
    return node;
}
Student* createStudent(int code, char* name)
{
    Student* student = (Student*)malloc(sizeof(Student));
    student->code = code;
    student->name = (char*)malloc(sizeof(strlen(name) + 1));
    strcpy(student->name, name);
    return student;
}

