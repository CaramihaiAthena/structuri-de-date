#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <stdbool.h>

typedef struct Employee
{
    char* name;
}Employee;

typedef struct Node
{
    Employee* info;
    struct Node* next;
}Node;

Employee* createEmployee(char* name);
Node* createNode(Employee* info);

Node* insertAtBeg(Node* tail, Employee* info);
Node* insertTail(Node* tail, Employee* info);
Node* insertNthPos(Node* tail, Employee* info, int pos);

void deleteNthPos(Node* tail, Employee* info, int pos);
void print(Node* tail, Employee* info);

int main()
{
    FILE* pFile = fopen("Data.txt", "r");
    Node* list = NULL;

    char* names[100];       //matricea care contine datele din fisier
    static short freq[26];  //26 litere ale alfabetului

    char** agenda[26];      //matrice cu nume alocate dinamic

    //seteaza toata memoria cu NULL
    memset(names, 0, 100 * sizeof(char*));
    memset(agenda, 0, 26 * sizeof(char*));

    if (pFile) {
        char buffer[128];
        int index = 0;

        fscanf(pFile, "%s", buffer);    //citim din fisier

        while (!feof(pFile)) //cat timp fisierul este deschis
        {
            names[index] = (char*)malloc((strlen(buffer) + 1) * sizeof(char));
            strcpy(names[index++], buffer);  //se copiaza in buffer fiecare linie in parte

            int pos = *buffer - 'A';    //pos = A
            freq[pos]++;
            fscanf(pFile, "%s", buffer);
        }

        short temp[26];
        for (int i = 0; i < 26; i++)
            temp[i] = freq[i];
        for (int i = 0; i < 99; i++)
            if (names[i])
            {
                int pos = *names[i] - 'A';
                if (agenda[pos] == NULL)
                    agenda[pos] = (char**)malloc(freq[pos] * sizeof(char*));
                agenda[pos][freq[pos] - 1] = (char*)malloc((strlen(names[i]) + 1) * sizeof(char));
                strcpy(agenda[pos][freq[pos] - 1], names[i]);
                freq[pos]--;
            }
        for (int i = 0; i < 26; i++)
        {
            if (agenda[i])
            {
                printf("Group %c\n", i + 'A');
                for (int j = 0; j < temp[i]; j++)
                {
                    printf("Name %s\n", agenda[i][j]);

                    //create the Employee* info
                    Employee* emp = createEmployee(agenda[i][j]);
                    //insert the name into the list
                    //insertHead(&list, student);
                    list = insertTail(list, emp);

                }
            }
        }
    }
}

void print(Node* tail, Employee* info)
{
    Node* node = tail->next;
    while (node)
    {
        printf("Name: %s \n ", node->info->name);
        node = node->next;
    }
}

void deleteNthPos(Node* tail, Employee* info, int pos)
{
    Node* temp1 = tail->next;

    if (tail->next == tail)
    {
        free(tail);
        tail = NULL;
    }
    while (pos > 2)
    {
        temp1 = temp1->next;
        pos--;
    }
    Node* temp2 = temp1->next;
    temp1->next = temp2->next;

    if (temp2 == tail)
    {
        tail = temp1;
    }
    free(temp2);
    temp2 = NULL;
    if (temp1)
    {
        free(temp1->info->name);
        free(temp1->info);
        free(temp1);
    }
}

Node* insertNthPos(Node* tail, Employee* info, int pos)
{
    Node* temp1 = createNode(info);
    Node* temp2 = tail->next;
    if (pos == 1)
    {
        temp1->next = temp2;
        temp2 = temp1;
    }
    else
    {
        for (int i = 0; i < pos - 2; i++)
        {
            temp2 = temp2->next;
        }
        temp2->next = temp1;
        temp1->next = temp2->next;
    }
    return tail;

}

Node* insertTail(Node* tail, Employee* info)
{
    Node* node = createNode(info);
    if (tail == NULL)
    {
        tail = node;
    }
    else
    {
        node->next = tail->next;
        tail->next = node;
        tail = tail->next;
    }

    return tail;

}
Node* insertAtBeg(Node* tail, Employee* info)
{
    Node* node = createNode(info);
    //connect the node to the structure
    node->next = tail->next;
    //connect the structure to the node
    tail->next = node;
    return tail;
}

Node* createNode(Employee* info)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->info = info;
    node->next = node;
    return node;
}

Employee* createEmployee(char* name)
{
    Employee* emp = (Employee*)malloc(sizeof(Employee));
    emp->name = (char*)malloc(strlen(name) + 1);
    strcpy(emp->name, name);
    return emp;
}



