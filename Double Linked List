#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Student
{
    int code;
    char* name;
}Student;

typedef struct Node
{
    Student* info;
    struct Node* next;
    struct Node* prev;
}Node;


Student* createStudent(int code, char* name);
Node* createNode(Student* info);

Node* insertAtBeg(Student* info, Node* head);
void insertTail(Student* info, Node** head);
Node* insertNthPos(Student* info, Node* head, int pos);

Node* deleteAtBeg(Node* head);
Node* deleteNthPos(Node* head, int pos);
Node* deleteTail(Node* head);
Node* delete(Node* head, int pos);

void printStudent(Student* info);
void print(const Node* head);


void main()
{

    Node* list = NULL;
    Student* stud = NULL;

    FILE* pFile = fopen("Data.txt", "r");
    char lineBuffer[128];

    char* token;
    char sep_list[] = ",\n";

    if (pFile)
    {
        while (fgets(lineBuffer, sizeof(lineBuffer), pFile))
        {
            stud = (Student*)malloc(sizeof(Student));
            //parsing the code
            token = strtok(lineBuffer, sep_list);
            stud->code = atoi(token);

            //parsing the name
            token = strtok(NULL, sep_list);
            stud->name = (char*)malloc(strlen(token) + 1);
            strcpy(stud->name, token);

            //insert into the list
            insertTail(stud, &list);
        }

        print(list);

    }

}

void print(const Node* head)
{
    while (head)
    {
        printStudent(head->info);
        head = head->next;
    }
    printf("\n");
}

void printStudent(Student* info)
{
    printf("Code %d - Name %s \n", info->code, info->name);
}

Node* delete(Node* head, int pos)
{
    Node* temp = head;
    if (pos == 1)
    {
        head = deleteAtBeg(head);
    }
    else if (head->next == NULL)
    {
        head = deleteTail(head);
    }
    else
    {
        head = deleteNthPos(head, pos);
    }
    if (temp)
    {
        free(temp->info->name);
        free(temp->info);
        free(temp);
    }
    return head;
}

Node* deleteTail(Node* head)
{
    Node* temp1 = head;
    while (temp1->next != NULL)
    {
        temp1 = temp1->next;
    }
    Node* temp2 = temp1->prev;
    temp2->next = NULL;
    free(temp1);
    return head;

}

Node* deleteNthPos(Node* head, int pos)
{
    Node* temp1 = head;
    for (int i = 0; i < pos - 2; i++)
    {
        temp1 = temp1->next;
    }
    Node* temp2 = temp1->next;
    temp1->next = temp2->next;
    temp2->next->prev = temp1;
    free(temp2);
    temp2 = NULL;
    return head;

}

Node* deleteAtBeg(Node* head)
{
    Node* temp = head;
    head = head->next;
    head->prev = NULL;
    free(temp);
    temp = NULL;

    return head;
}
Node* insertNthPos(Student* info, Node* head, int pos)
{
    Node* temp1 = head;
    Node* node = createNode(info);

    for (int i = 0; i < pos - 2; i++)
    {
        temp1 = temp1->next;
    }
    Node* temp2 = temp1->next;
    temp1->next = node;
    node->prev = temp1;
    node->next = temp2;
    temp2->prev = node;
    return head;
}

void insertTail(Student* info, Node** head)
{
    Node* temp = *head;
    Node* node = createNode(info);

    if (temp == NULL)
    {
        *head = node;
        return;
    }
    while (temp->next)
    {
        temp = temp->next;
    }
    temp->next = node;
    node->prev = temp;
}
Node* insertAtBeg(Student* info, Node* head)
{
    Node* node = createNode(info);
    //connect the node to the structure
    node->next = head;
    //connect the structure to the node
    head->prev = node;
    head = node;
    return head;
}
Node* createNode(Student* info)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->info = info;
    node->next = NULL;
    node->prev = NULL;
    return node;
}
Student* createStudent(int code, char* name)
{
    Student* student = (Student*)malloc(sizeof(Student));
    student->code = code;
    student->name = (char*)malloc(sizeof(strlen(name) + 1));
    strcpy(student->name, name);
    return student;
}

